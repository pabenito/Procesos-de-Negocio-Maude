load bpmn.maude 

mod VARS is 
    pr BPMN-CHECK .

    var Obj : Object .
    vars O : Oid .
    vars N N' : Nat .
    vars T T' T'' : Time .
    var Atts : AttributeSet .
    var Token : Token .
    var id1 id2 id3 id4 : Id .
    var IdSet : Set{Id} .
    var NodeSet : Set{Node} .
    var TaskName : String .
    var ResourceSet : Set{Resource} .  
    var FlowSet : Set{Flow} .
    var TokenSet : Set{Token} . 
endm

red isTokenSetReady((token(id("f05"), 0), token(id("n03"), 2)), id("f03")) == false .
red isTokenSetReady(token(id("00"), 0), id("00")) == true .
red isTokenSetReady((token(id("00"), 0), token(id("01"), 0), token(id("02"), 5)), (id("00"), id("01"))) == true . --- Devuelve true porque todos los token's en el set de id's est√°n con temporizador 0
red isTokenSetReady((token(id("00"), 0), token(id("01"), 5), token(id("02"), 0)), (id("00"), id("01"))) == false . --- Devuelve false porque tiene el token con id 01 con temporizador 5

red findTokensNotInIdSet((token(id("00"), 0), token(id("01"), 0), token(id("02"), 0), token(id("03"), 0)), (id("00"), id("01"))) == (token(id("02"), 0), token(id("03"), 0)) .

red getTimeFromFlowSetAndId ((flow(id("00"), 3), flow(id("01"), 6), flow(id("02"), 10)), id("01")) == 6 .

red getTokenSetFromFlowSetAndIdSet((flow(id("00"), 15), flow(id("01"), 20), flow(id("02"), 30), flow(id("04"), 30)), (id("00"), id("01"), id("02"))) == (token(id("00"), 15), token(id("01"), 20), token(id("02"), 30)).

red isResourceAvailable((resource(id("00"), 1, 0), resource(id("01"), 1, 1)), (id("01"))) == true . --- Devuelve TRUE
red isResourceAvailable((resource(id("00"), 1, 0), resource(id("01"), 1, 1)), (id("00"))) == false . --- Devuelve FALSE

red hasResources((resource(id("00"), 1, 1), resource(id("01"), 1, 1)), (id("00"), id("01"))) == true . --- Devuelve TRUE
red hasResources((resource(id("00"), 1, 1), resource(id("01"), 1, 0)), (id("00"), id("01"))) == false . --- Devuelve FALSE

red removeResources ((resource(id("00"), 1, 1), resource(id("01"), 1, 1), resource(id("02"), 2, 2)), (id("00"), id("01"))) == (resource(id("00"), 1, 0), resource(id("01"), 1, 0), resource(id("02"), 2, 2)) .

red delta((token(id("00"), 6), token(id("01"), 10), token(id("02"), 2)), 2) == (token(id("00"), 4), token(id("01"), 8), token(id("02"), 0)) . --- Resta Time al set de tokens

red isBlokedByResources(token(id("0"), 0), task(id("1"), "TaskName", id("0"), id("2"), 2, id("3")), resource(id("3"), 1, 0)) == true .
red isBlokedByResources(token(id("1"), 0), task(id("1"), "TaskName", id("0"), id("2"), 2, id("3")), resource(id("3"), 1, 0)) == false .
red isBlokedByResources(token(id("0"), 0), task(id("1"), "TaskName", id("0"), id("2"), 2, id("3")), resource(id("3"), 1, 1)) == false .
red isBlokedByResources(token(id("0"), 0), task(id("1"), "TaskName", id("0"), id("2"), 2, empty), empty) == false .
red isBlokedByResources(token(id("0"), 0), empty, empty) == false .

red isBlokedByParallel(token(id("1"), 0), < O : Process | nodes: merge(id("2"), parallel, (id("1"), id("3")), id("4")),tokens: token(id("3"), 1) >) == true .
red isBlokedByParallel(token(id("1"), 0), < O : Process | nodes: merge(id("2"), parallel, (id("1"), id("3")), id("4")),tokens: token(id("3"), 0) >) == false .
red isBlokedByParallel(token(id("1"), 0), < O : Process | nodes: merge(id("2"), parallel, (id("1"), id("3")), id("4"))>) == false .
red isBlokedByParallel(token(id("1"), 0), < O : Process | nodes: merge(id("2"), parallel, id("3"), id("4")),tokens: token(id("3"), 1) >) == false .

red isBloked(token(id("1"), 0), < O : Process | nodes: merge(id("2"), parallel, (id("1"), id("3")), id("4")), tokens: token(id("3"), 1), resources: empty >) == true .
red isBloked(token(id("0"), 0), < O : Process | nodes: task(id("1"), "TaskName", id("0"), id("2"), 2, id("3")), tokens: empty, resources: resource(id("3"), 1, 0) >) == true .
red isBloked(token(id("0"), 0), < O : Process | nodes: task(id("1"), "TaskName", id("4"), id("2"), 2, id("3")), tokens: empty, resources: resource(id("3"), 1, 0) >) == false .

red mte(token(id("1"), 0), < O : Process | nodes: merge(id("2"), parallel, (id("1"), id("3")), id("4")), tokens: token(id("3"), 1), resources: empty >) == INF .
red mte(token(id("0"), 0), < O : Process | nodes: task(id("1"), "TaskName", id("0"), id("2"), 2, id("3")), tokens: empty, resources: resource(id("3"), 1, 0) >) == INF .
red mte(token(id("1"), 0), < O : Process | nodes: (merge(id("2"), parallel, (id("1"), id("3")), id("4")), task(id("5"), "TaskName", id("1"), id("6"), 2, id("7"))), tokens: token(id("7"), 1), resources: resource(id("7"), 1, 0) >) == INF .
red mte((token(id("0"), 0), token(id("8"), 1)), < O : Process | nodes: task(id("1"), "TaskName", id("0"), id("2"), 2, id("3")), tokens: empty, resources: resource(id("3"), 1, 0) >) == 1 .
red mte((token(id("1"), 1), token(id("1"), 0)), < O : Process | nodes: merge(id("2"), parallel, (id("1"), id("3")), id("4")),tokens: token(id("3"), 1), resources: empty >) == 1 .
